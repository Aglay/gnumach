-*- Text -*-
This is NOT the GNU mach 1.2 distribution!

This is OSKit-Mach and this README file is out of date!
NEWS is also out of date.
See ChangeLog.oskit for changes since the split from gnumach.
ChangeLog has the earlier gnumach changes since the 1.2 release.

It is safe to install this over your gnumach installation.  The installed
header files are 100% compatible (and 99.44% identical).  This installs
/boot/oskit-mach and doesn't touch /boot/gnumach, so you can boot either.

There are no meaningful --enable options.  Drivers are determined by
whatever is compiled into the oskit libraries (I'll add options later).
SMP does not work, don't even bother trying it.  The FPE does not exist,
don't even bother trying it.  There is no DDB, but there is serial-port
GDB, which is better (if you have another machine to run GDB on).

Following is the gnumach-1.2 README, which is mostly not helpful now.


This kernel is derived from the Utah kernel source.  We use it to run
the Hurd on.  It is being distributed by us so that we can more easily
modify the source, and so that it will work with the normal GNU coding
standards and Makefile conventions.

libmach, bootloaders, default pagers, and the like are not part of
this distribution.  For libraries, we refer you to the GNU C library,
which has Mach support.  For bootloaders, we refer you to GRUB.  (This
kernel can be loaded by any bootloader that uses the multiboot
standard.)  For default pagers, we refer you to your particular system
that you will run on top of Mach.

The interface generator `MiG' is no longer part of this distribution.

Generic installation instructions may be found in the file INSTALL.

By default, you get a kernel with no device drivers for disks and
network devices.  This is not what you want!  Examine the file
`README-Drivers' in the directory for the machine type your kernel is
on (e.g., `i386/README-Drivers') for a list of configure --enable
switches.  Give the appropriate set for your hardware.  It is
generally safe to specify switches for hardware you don't have; in
this way you can build kernels that work on different physical machine
set ups.

If you want the in-kernel debugger compiled in, specify --enable-kdb
to configure.  This is only useful if you actually anticipate
debugging the kernel, of course.  We don't turn it on be default
because it adds considerably to the unpageable memory footprint of the
kernel.

If you want to use the kmsg device, specify --enable-kmsg to
configure. It is disabled by default, because we assume that it is
unstable and there is no appropriate translator for it.

The specific switches you give to configure are always recorded in the
file `config.status'.  So you can always tell what options you used to
build a particular kernel.

Bug reports relating to this distribution should be sent to
bug-hurd@gnu.org.  Requests for assistance should be made on
help-hurd@gnu.org.
